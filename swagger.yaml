openapi: "3.1.0"
info:
  description: |
    # Documentation for the subscription service API
    
    ## Domain
    
    ### Subscription plan
    
    A subscription plan is a set of features that a user can subscribe to. Each subscription plan has a name, a price, a duration in days and a set of features.
    
    A subscription plan can inherit features from another subscription plan so that the features do not have to be defined multiple times.
    
    Price history is kept for each subscription plan. Each price has a start date and an end date. The end date is null if the price is still valid.
    
    #### Subscription plan status
    
    ##### Active subscription plan
    
    Active subscription plan is a subscription plan that can be subscribed to. A subscription plan is active if:
    
    - The subscription plan does not have a `validFrom` date specified or the `validFrom` date is in the past.
    - The subscription plan does not have a `validTo` date specified or the `validTo` date is in the future.
    
    For active subscription plans, `validTo` can be edited and set into the future.
    
    ##### Inactive subscription plan
    
    Inactive subscription plan is a subscription plan that cannot be subscribed to. A subscription plan is inactive if:
    
    - The subscription plan has a `validFrom` date specified and the `validFrom` date is in the future.
    - The subscription plan has a `validTo` date specified and the `validTo` date is in the past.
    
    For to-be-active subscription plans, the `validFrom` and `validTo` can be edited.
    For to-be-inactive subscription plans, `validTo` can be edited.
    For already-inactive subscription plans, no changes can be made. It can be only deleted.
    
    ##### Deleted subscription plan
    
    - The subscription plan has been deleted manually.
    
    No changes can be made to deleted subscription plans.
    
    #### Configuration options
    
    ##### Keep subscription price
    `keep` - if a customer prolongs their subscription, the price of the subscription is kept. If the price of the subscription plan has changed, the customer will still pay the old price.
    
    `update` - if a customer cancels their subscription and then subscribes again, the price of the subscription is not kept. The customer will pay the current price of the subscription plan.
    
    Default value: keep
    
    ##### Valid from
    If set, the subscription plan will be valid from this date. If not set, the subscription plan will be valid as soon as it is created.
    
    When creating a new plan, the date must be in the future.
    
    If the subscription plan is already active, the date cannot be changed.
    
    Default value: null
    
    ##### Valid to
    If set, the subscription plan will be valid to this date. If not set, the subscription plan will be valid indefinitely.
    
    The date must be in the future. If validFrom is set, the date must be after validFrom.
    
    If the subscription plan is inactive, the date cannot be changed.
    
    Default value: null
    
    ##### Replaced by
    If validTo is set and this is set, invalid subscription plan will suggest the (still valid) subscription plan with given ID when customer wants to prolong their subscription.
    
    The subscription plan with the given ID must exist. The subscription plan must not be replaced by itself.
    
    Default value: null
    
    ### Feature
    
    A feature is a part of a subscription plan. Each feature has a name and a description.
    
    ### Subscription
    
    A subscription is a record of a user subscribing to a subscription plan. Each subscription has a start date, an end date and a reference to the subscription plan.
    
    #### Subscription status
    
    ##### Requested subscription
    
    Requested subscription is a subscription that has been requested by a customer, but has not been confirmed yet. It does not have a start date nor an end date.
    
    ##### Active subscription
    
    Active subscription is a subscription that is currently active. A subscription is active if:
    
    - The subscription `startDate` date is in the past.
    - The subscription `endDate` date is in the future.
    
    ##### Canceled subscription
    
    Canceled subscription is a subscription that has been canceled by a customer. Such a subscription is still active until the `endDate` date.
    
    ##### Expired subscription
    
    Expired subscription is a subscription that has been active or canceled in the past, but is not active anymore.
    
    After the subscription expires, it cannot be prolonged anymore. New subscription will be created instead.
    
    ##### Revoked subscription
    
    Revoked subscription is a subscription that has been revoked by an administrator. Such a subscription is not active anymore.
    
    ### Customer
    
    A customer is a person who can subscribe to a subscription plan.
    
    ## Table of entity prefixes
    
    | Entity prefix | Entity name |
    | ------------- | ----------- |
    | sub           | Subscription |
    | plan          | Subscription plan |
    | feat          | Feature |
    | cust          | Customer |

  version: "1.0.0"
  title: "Subscription service API"
  contact:
    email: "bros@codebros.cz"

servers:
  - url: "https://sub.codebros.cz/api/v1"
    description: "Dev server"

paths:
  /ping:
    get:
      summary: "Ping the server"
      description: "Returns a simple message to verify that the server is running."
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "pong"

  /subscription-plans:
    get:
      summary: "List Subscription plans"
      description: "Returns a list of all Subscription plans."
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscriptionPlan"

    post:
      summary: "Create a new Subscription plan"
      description: "Creates a new Subscription plan."
      requestBody:
        $ref: "#/components/requestBodies/SubscriptionPlan"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionPlan"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

  /subscription-plans/{id}:
    get:
      summary: "Get Subscription plan"
      description: "Returns a Subscription plan with given ID."
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionPlan"
        404:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: "Update a Subscription plan"
      description: |
        Updates a Subscription plan with given ID.
        
        The following fields can be updated:
        
        - name
        - price
        - duration
        - features
        - parent
        - options
        
        Changing a price of a subscription plan will also create a new price history entry.
        
        Features are replaced altogether.
        
        Options `validFrom` and `validTo` can be updated only according to the rules described in the [Domain](#domain) section.
      requestBody:
        $ref: "#/components/requestBodies/UpdateSubscriptionPlan"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionPlan"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: "Delete Subscription plan"
      description: "Deletes a Subscription plan with given ID."
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: "No content"
        404:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

  /subscriptions:
    get:
      summary: "List Subscriptions"
      description: "Returns a list of all Subscriptions."
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subscription"

    post:
      summary: "Create a new Subscription"
      description: |
        Creates a new Subscription.
      requestBody:
        $ref: "#/components/requestBodies/Subscription"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

  /subscriptions/{id}:
    get:
      summary: "Get Subscription"
      description: "Returns a Subscription with given ID."
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        404:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

  /active-subscriptions/{id}:
    post:
        summary: "Activate Subscription"
        description: |
          Activates a Subscription with given ID.
            
          The Subscription must be in the `requested` state.
        parameters:
          - $ref: "#/components/parameters/id"
        responses:
          200:
            description: "OK"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Subscription"
          400:
            $ref: "#/components/responses/ErrorResponse"
          401:
            $ref: "#/components/responses/Unauthorized"

  /canceled-subscriptions/{id}:
    post:
      summary: "Cancel Subscription"
      description: |
        Cancels a Subscription with given ID.
          
        The Subscription must be in the `active` state.
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

  /revoked-subscriptions/{id}:
    post:
      summary: "Revoke Subscription"
      description: |
        Revokes a Subscription with given ID.
          
        The Subscription must be in the `requested` or `active` state.
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorized"

components:
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: Unique identification of the error.
        status:
          type: integer
          description: HTTP status code for convenience.
        code:
          type: integer
          description: Numeric code uniquely identifying the error. Note that codes are NOT unique across endpoints.
          example:
            - 40001
        title:
          type: string
          description: Message uniquely identifying the error.
        detail:
          type: string
          description: Request specific description of the error.

    Id:
      description: |
        Unique identifier in `<entity prefix>_<ksuid>` format.
        
        `<entity prefix>` is a prefix that identifies the entity type. For example, `sub` for subscriptions. See full table in the [Domain](#domain) section.
        
        `<ksuid>` is a [KSUID](https://github.com/segmentio/ksuid) identifier in base62 format.
      type: string
      readOnly: true

    Money:
      type: object
      properties:
        amount:
          type: string
          description: Amount of currency in cents, e.g. 1000 means 10.00 EUR
          example: 1250
        currency:
          type: string
          description: ISO currency format. So far only CZK is supported.
          example: EUR

    SubscriptionPlan:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: "Basic"
        price:
          $ref: "#/components/schemas/Money"
        duration:
          type: integer
          format: int32
          description: Duration of the subscription plan in days. If the value is 0, the subscription plan is valid indefinitely. Must not be negative.
          example:
            - 30
            - 365
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
        parent:
          $ref: "#/components/schemas/SubscriptionPlan"
        priceHistory:
          type: array
          items:
            $ref: "#/components/schemas/SubscriptionPlanPrice"
        options:
          $ref: "#/components/schemas/SubscriptionPlanOptions"
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          example: "active"
      required:
        - name
        - duration
        - price
        - features

    SubscriptionPlanOptions:
      type: object
      properties:
        keepPrice:
          type: string
          enum:
            - keep
            - update
          description: |
            `keep` - the price of the subscription is kept when the customer prolongs their subscription.
            Current price of the subscription plan is ignored.
            
            `update` - the price of the subscription is updated when the customer prolongs their subscription.
            Current price of the subscription is used.
            
            Default value: keep
          example: keep
        validFrom:
          type: string
          format: date-time
          nullable: true
          description: |
            If set, the subscription plan will be valid from this date. If not set, the subscription plan will be valid as soon as it is created.
              
            When creating a new plan, the date must be in the future.
            
            Default value: null
          example: "2021-01-01T00:00:00Z"
        validTo:
          type: string
          format: date-time
          nullable: true
          description: |
            If set, the subscription plan will be valid to this date. If not set, the subscription plan will be valid indefinitely.
              
            The date must be in the future. If validFrom is set, the date must be after validFrom.
            
            Default value: null
          example: "2022-01-01T00:00:00Z"
        replacedBy:
          type: string
          nullable: true
          description: |
            If validTo is set and this is set, invalid subscription plan will suggest the (still valid) subscription plan with given ID when customer wants to prolong their subscription.
              
            The subscription plan with the given ID must exist. The subscription plan must not be replaced by itself.
            
            Default value: null
          example: "plan_abc123"

    Feature:
      type: object
      properties:
        name:
          type: string
          example: "Unlimited users"
        description:
          type: string
          nullable: true
          example: "You can have as many users as you want"
      required:
        - name

    SubscriptionPlanPrice:
      type: object
      properties:
        price:
          $ref: "#/components/schemas/Money"
        startDate:
          type: string
          format: date-time
          example: "2021-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          nullable: true
          example: "2021-02-01T00:00:00Z"
      required:
        - price
        - startDate
        - endDate

    Subscription:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        startDate:
          type: string
          format: date-time
          nullable: true
          description: |
              If Subscription is requested, the date is null. Confirmation of the subscription request sets the date.
          example: "2021-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          nullable: true
          description: |
              If Subscription is requested, the date is null. Confirmation of the subscription request sets the date.
          example: "2021-02-01T00:00:00Z"
        plan:
          $ref: "#/components/schemas/SubscriptionPlan"
        status:
          type: string
          enum:
            - requested
            - active
            - canceled
            - expired
            - revoked
          example: "active"
      required:
        - id
        - startDate
        - endDate
        - plan
        - status

    SubscriptionEvent:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          type: string
          enum:
            - subscription_created
            - subscription_requested
            - subscription_confirmed
            - subscription_canceled
            - subscription_expired
            - subscription_revoked
            - subscription_prolonged
          example: "subscription_created"
        subscription:
          $ref: "#/components/schemas/Id"
        date:
          type: string
          format: date-time
          description: |
              Date of the event.
          example: "2021-01-01T00:00:00Z"
        detail:
          type: string
          nullable: true
          description: |
            Description of the event.
          example: "Subscription created"
      required:
        - id
        - type
        - date
        - detail

    Customer:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        externalId:
          type: string
          nullable: true
          description: |
              ID of the customer in the external system.
          example: "123"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "doe@example.com"
        subscription:
          $ref: "#/components/schemas/Subscription"
          nullable: true
      required:
        - id
        - externalId
        - name
        - email
        - subscription

  requestBodies:
    SubscriptionPlan:
      description: |
        Subscription plan to create or to patch.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Basic"
              price:
                $ref: "#/components/schemas/Money"
              duration:
                type: integer
                format: int32
                description: Duration of the subscription plan in days. If the value is 0, the subscription plan is valid indefinitely. Must not be negative.
                example:
                  - 30
                  - 365
              features:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
                nullable: true
              parent:
                $ref: "#/components/schemas/Id"
              options:
                $ref: "#/components/schemas/SubscriptionPlanOptions"
            required:
              - name
              - duration
              - price

    UpdateSubscriptionPlan:
      description: |
        Subscription plan to create or to patch.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Basic"
              price:
                $ref: "#/components/schemas/Money"
              duration:
                type: integer
                format: int32
                description: Duration of the subscription plan in days. If the value is 0, the subscription plan is valid indefinitely. Must not be negative.
                example:
                  - 30
                  - 365
              features:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
                nullable: true
              parent:
                $ref: "#/components/schemas/Id"
              options:
                $ref: "#/components/schemas/SubscriptionPlanOptions"

    Subscription:
      description: |
        Subscription to create.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              plan:
                - $ref: "#/components/schemas/Id"
              customer:
                anyOf:
                  - $ref: "#/components/schemas/Id"
                  - type: object
                    properties:
                      externalId:
                        type: string
                        nullable: true
                        description: |
                          ID of the customer in the external system.
                        example: "123"
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        format: email
                        example: "doe@example.com"
                    required:
                      - externalId
                      - name
                      - email
            required:
              - plan
              - customer

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"

  responses:
    ErrorResponse:
      description: General error response for all endpoints
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: There was an error authenticating a request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
